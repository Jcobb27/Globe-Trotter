{"version":3,"sources":["../../../../src/utils/transition/linear-interpolator.js"],"names":["assert","TransitionInterpolator","isValid","lerp","getEndValueByShortestPath","VIEWPORT_TRANSITION_PROPS","LinearInterpolator","transitionProps","propNames","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","t","viewport"],"mappings":"8xDAAA,MAAOA,CAAAA,MAAP,KAAmB,WAAnB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,2BAAnC,CAEA,OAAQC,OAAR,CAAiBC,IAAjB,CAAuBC,yBAAvB,KAAuD,oBAAvD,C,GAEMC,CAAAA,yBAAyB,CAAG,CAAC,WAAD,CAAc,UAAd,CAA0B,MAA1B,CAAkC,SAAlC,CAA6C,OAA7C,C,CAKbC,kB,iCAKnB,6BAAyD,WAA7CC,eAA6C,wDAA3BF,yBAA2B,6KAEvD,MAAKG,SAAL,CAAiBD,eAFsC,MAGxD,C,kJAEeE,U,CAAYC,Q,CAAU,IAC9BC,CAAAA,kBAAkB,CAAG,EADS,CAE9BC,gBAAgB,CAAG,EAFW,6EAIpC,wBAAkB,KAAKJ,SAAvB,4GAAkC,IAAvBK,CAAAA,GAAuB,aAC1BC,UAAU,CAAGL,UAAU,CAACI,GAAD,CADG,CAE1BE,QAAQ,CAAGL,QAAQ,CAACG,GAAD,CAFO,CAGhCb,MAAM,CAACE,OAAO,CAACY,UAAD,CAAP,EAAuBZ,OAAO,CAACa,QAAD,CAA/B,WAA8CF,GAA9C,qCAH0B,CAKhCF,kBAAkB,CAACE,GAAD,CAAlB,CAA0BC,UALM,CAMhCF,gBAAgB,CAACC,GAAD,CAAhB,CAAwBT,yBAAyB,CAACS,GAAD,CAAMC,UAAN,CAAkBC,QAAlB,CAClD,CAXmC,yLAapC,MAAO,CACLC,KAAK,CAAEL,kBADF,CAELM,GAAG,CAAEL,gBAFA,CAIR,C,0DAEgBH,U,CAAYC,Q,CAAUQ,C,CAAG,IAClCC,CAAAA,QAAQ,CAAG,EADuB,gFAExC,eAAWN,GAAX,YAAkB,KAAKL,SAAvB,gHAAWK,GAAX,cACEM,QAAQ,CAACN,GAAD,CAAR,CAAgBV,IAAI,CAACM,UAAU,CAACI,GAAD,CAAX,CAAkBH,QAAQ,CAACG,GAAD,CAA1B,CAAiCK,CAAjC,CAHkB,gMAKxC,MAAOC,CAAAA,QACR,C,wBAnC6ClB,sB,SAA3BK,kB","sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {isValid, lerp, getEndValueByShortestPath} from './transition-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n\n/**\n * Performs linear interpolation of two viewports.\n*/\nexport default class LinearInterpolator extends TransitionInterpolator {\n\n  /**\n   * @param {Array} transitionProps - list of props to apply linear transition to.\n   */\n  constructor(transitionProps = VIEWPORT_TRANSITION_PROPS) {\n    super();\n    this.propNames = transitionProps;\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    for (const key of this.propNames) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = {};\n    for (const key of this.propNames) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n    return viewport;\n  }\n\n}\n"],"file":"linear-interpolator.js"}