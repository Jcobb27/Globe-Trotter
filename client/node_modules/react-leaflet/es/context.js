var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import hoistNonReactStatics from 'hoist-non-react-statics';
import React, { createContext,
// $FlowFixMe: import
forwardRef } from 'react';

var _createContext = createContext({}),
    Consumer = _createContext.Consumer,
    Provider = _createContext.Provider;

export var LeafletConsumer = Consumer;
export var LeafletProvider = Provider;

export var withLeaflet = function withLeaflet(WrappedComponent) {
  var WithLeafletComponent = function WithLeafletComponent(props, ref) {
    return React.createElement(
      Consumer,
      null,
      function (leaflet) {
        return React.createElement(WrappedComponent, _extends({}, props, { leaflet: leaflet, ref: ref }));
      }
    );
  };

  // flowlint-next-line sketchy-null-string:off
  var name = WrappedComponent.displayName || WrappedComponent.name;
  WithLeafletComponent.displayName = 'Leaflet(' + name + ')';

  var LeafletComponent = forwardRef(WithLeafletComponent);
  hoistNonReactStatics(LeafletComponent, WrappedComponent);

  return LeafletComponent;
};