function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

import { createPortal } from 'react-dom';

import MapComponent from './MapComponent';
import updateClassName from './utils/updateClassName';

var DivOverlay = function (_MapComponent) {
  _inherits(DivOverlay, _MapComponent);

  function DivOverlay(props) {
    _classCallCheck(this, DivOverlay);

    var _this = _possibleConstructorReturn(this, _MapComponent.call(this, props));

    _this.onClose = function () {
      if (_this.props.onClose) {
        _this.props.onClose();
      }
    };

    _this.onOpen = function () {
      _this.forceUpdate(); // Re-render now that leafletElement is created
      if (_this.props.onOpen) {
        _this.props.onOpen();
      }
    };

    _this.leafletElement = _this.createLeafletElement(props);
    return _this;
  }

  // eslint-disable-next-line no-unused-vars


  DivOverlay.prototype.createLeafletElement = function createLeafletElement(props) {
    throw new Error('createLeafletElement() must be implemented');
  };

  // eslint-disable-next-line no-unused-vars


  DivOverlay.prototype.updateLeafletElement = function updateLeafletElement(prevProps, props) {};

  DivOverlay.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    updateClassName(this.leafletElement._container, prevProps.className, this.props.className);

    this.updateLeafletElement(prevProps, this.props);

    if (this.leafletElement.isOpen()) {
      this.leafletElement.update();
      this.onRender();
    }
  };

  DivOverlay.prototype.onRender = function onRender() {};

  DivOverlay.prototype.render = function render() {
    if (this.leafletElement._contentNode) {
      return createPortal(this.props.children, this.leafletElement._contentNode);
    }
    return null;
  };

  return DivOverlay;
}(MapComponent);

export default DivOverlay;